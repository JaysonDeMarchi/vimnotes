*notes.txt*                 My Notes                                   *notes*
" vim: filetype=help foldmethod=marker modifiable noreadonly

==============================================================================
Deleting:
    `x`     - deletes the current character
    `dd`    - deletes the current line

==============================================================================
Moving content:
    `m`     -  `m`ark uses the file line index to determine where to move the
                current line. For better visualization when moving content
                enable line numbers (`:se number`)

    `m+1`   - moves the current line visually down one row (but up one in the
              index)
    `m-2`   - moves the current line visually up one row
    `m1`    - moves the current line visually to the second row in the file
              (index starts at 0)
    `>>`    - indent the current line's content to the right one tab size.
    `<<`    - indent the current line's content to the left one tab size.

==============================================================================
Moving/Navigating the cursor:
    Vim supports arrow keys. `h`,`j`,`k`,`l` are also mapped to navigation
    
    `h`     - `<LEFT>`
    `j`     - `<DOWN>`
    `k`     - `<UP>`
    `l`     - `<RIGHT>`

    These mappings are more useful when writing commands than in practical use
    since they take up less space.
    e.g. >
        " Creates a comment block, `/**  */`, with the cursor between the
        " spaces
        inoremap /**<SPACE> /**<SPACE><SPACE>*/hhh
    <

==============================================================================
Motions:
    Motions are commands that move the cursor
    `w`     - `w`ord
    `b`     - `b`egining of the word
    `e`     - `e`nd of the word
    `t`     - `t`ill movees the cursor to before the next occurance of the
              provided character
    `t)`    - moves the cursor to the before the next occurance of the
              character `)`
    `T`     - like `t`ill, but moves the cursor to the character after the
              next occurance of the provided character
    `0`     - moves the cursor to the start of the line
    `$`     - moves the cursor to the end of the line
    `^`     - moves the cursor to the first non whitespace character

==============================================================================
Jumping:
    The default `:` function in normal mode is jumping.
    `:1`    - jumps to line 1.
    `G`     - `G`o down to the bottom of the file. Jumps to the end of file.

==============================================================================
Searching:
    `/`     - `s`lash is Vim's CTRL-F.
    `/map`  - searches for the word "map"
    `n`     - `n`ext will jump to the next match on our current search.
              `n` uses the cursor's current position and has no reference to
              the previous match you jumped to.
    `N`     - `N`prev? `N` moves to the previous match.

==============================================================================
Copy/Pasting:
    `y`     - `y`ank or Vim's copy.
    `yy`    - copies the entire line. When you paste an entire line a new line
              is created below the cursor and the content is added there.

    `p`     - `p`ut or Vim's paste. `p` will take whatever the last edit made
              in normal mode, so if you copy a line (`yy`), delete a line
              (`dd`), then paste the line you will paste the deleted line.
    "+y   - copies the current highlighted text from visual mode to the clip
              board.

==============================================================================
Undo/Redo:
    `u`     - `u`ndo
    `red`   - `red`o

==============================================================================
Replace:
    `r`     - `r`eplace. Will replace the current character under the cursor
              with the next character you enter. This can work with visual mode
              allowing you to replace entire blocks with a single character.

==============================================================================
Regex Replace:
    `%s/original/new/g` - replaces all matches for "original" with "new"

==============================================================================
Combining Commands:
    Vim allows users to combine comands for extra functionality
    `dt"`   - delete the content from the cursor up to the next double quotes.
    `y$`    - copy the content from the cursor up to the end of the line.
